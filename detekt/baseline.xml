<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArrayPrimitive:ArrayFixtureSpec.kt$ArrayFixtureSpec$Array&lt;Int></ID>
    <ID>FunctionOnlyReturningConstant:DefaultPredicate.kt$@Suppress("UNUSED_PARAMETER") @PublishedApi internal fun &lt;T> defaultPredicate(value: T): Boolean</ID>
    <ID>FunctionOnlyReturningConstant:PublicApi.kt$@Suppress("UNUSED_PARAMETER") @PublishedApi internal fun &lt;T> defaultPredicate(value: T): Boolean</ID>
    <ID>LongParameterList:TupleFixture.kt$( type: KClass&lt;Triple&lt;*, *, *>>, firstQualifier: Qualifier? = null, firstGenerator: Function1&lt;Qualifier?, First>, secondQualifier: Qualifier? = null, secondGenerator: Function1&lt;Qualifier?, Second>, thirdQualifier: Qualifier? = null, thirdGenerator: Function1&lt;Qualifier?, Third>, )</ID>
    <ID>MagicNumber:Dangerfile.df.kts$1000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$20</ID>
    <ID>MagicNumber:Dangerfile.df.kts$2000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$500</ID>
    <ID>MagicNumber:build.gradle.kts$0.97</ID>
    <ID>MagicNumber:build.gradle.kts$8</ID>
    <ID>MagicNumber:settings.gradle.kts$30</ID>
    <ID>MaxLineLength:Dangerfile.df.kts$val</ID>
    <ID>MaxLineLength:GradlePlugin.kt$GradlePlugin$const val runtimeConfig = "tech.antibytes.gradle-plugins:antibytes-runtime-configuration:${Version.Gradle.antibytes}"</ID>
    <ID>MaxLineLength:TupleFixture.kt$public</ID>
    <ID>MaxLineLength:build.gradle.kts$config = files("$projectDir/detekt/config.yml")</ID>
    <ID>TooManyFunctions:MapFixture.kt$tech.antibytes.kfixture.MapFixture.kt</ID>
    <ID>TooManyFunctions:RandomWrapper.kt$RandomWrapper : Random</ID>
    <ID>TooManyFunctions:RangedSpecialArrayFixture.kt$tech.antibytes.kfixture.RangedSpecialArrayFixture.kt</ID>
    <ID>TooManyFunctions:TupleFixture.kt$tech.antibytes.kfixture.TupleFixture.kt</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidMain by getting { dependsOn(noJsMain) dependencies { implementation(Dependency.multiplatform.kotlin.android) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependsOn(noJsTest) dependsOn(androidAndroidTestRelease) dependsOn(androidTestFixtures) dependsOn(androidTestFixturesDebug) dependsOn(androidTestFixturesRelease) dependencies { implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Main by getting { dependsOn(iosMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Test by getting { dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsMain by getting { dependencies { implementation(Dependency.multiplatform.kotlin.js) implementation(Dependency.js.nodejs) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsTest by getting { dependencies { implementation(Dependency.multiplatform.test.js) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting { dependsOn(noJsMain) dependencies { implementation(Dependency.multiplatform.kotlin.jdk8) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { dependsOn(noJsTest) dependencies { implementation(Dependency.multiplatform.test.jvm) implementation(Dependency.multiplatform.test.junit) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Main by getting { dependsOn(otherMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Test by getting { dependsOn(otherTest) }</ID>
  </CurrentIssues>
</SmellBaseline>
